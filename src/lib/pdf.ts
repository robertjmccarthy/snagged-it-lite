import jsPDF from 'jspdf';
import { format } from 'date-fns';

// Need to import jspdf-autotable this way for proper functioning
import 'jspdf-autotable';

// Define interfaces for our data types
interface Snag {
  id: string;
  checklist_item?: {
    friendly_text: string;
  };
  note?: string;
  photo_url?: string;
  created_at: string;
}

interface ShareDetails {
  address: string;
  builder_name: string;
  builder_email: string;
  updated_at: string;
}

/**
 * Generate a PDF document of the user's snag list
 * @param snags - Array of snag objects
 * @param shareDetails - Object containing details about the share
 * @returns - jsPDF document object
 */
export const generateSnagListPDF = (snags: Snag[], shareDetails: ShareDetails): jsPDF => {
  // Initialize PDF document
  const doc = new jsPDF();
  
  // Add title
  doc.setFontSize(20);
  doc.setTextColor(49, 89, 62); // Dark green color from the design system
  doc.text('Snag List Report', 105, 20, { align: 'center' });
  
  // Add date
  doc.setFontSize(10);
  doc.setTextColor(51, 51, 51); // Text color from design system
  const currentDate = format(new Date(), 'MMMM d, yyyy');
  doc.text(`Generated on ${currentDate}`, 105, 28, { align: 'center' });
  
  // Add logo placeholder
  doc.setFontSize(12);
  doc.setTextColor(133, 224, 163); // Primary green from design system
  doc.text('SnaggedIt', 20, 20);
  
  // Add share details
  doc.setFontSize(12);
  doc.setTextColor(51, 51, 51);
  doc.text('Property Details', 20, 40);
  
  doc.setFontSize(10);
  doc.text(`Address: ${shareDetails.address}`, 20, 48);
  doc.text(`Builder: ${shareDetails.builder_name}`, 20, 54);
  doc.text(`Builder Email: ${shareDetails.builder_email}`, 20, 60);
  doc.text(`Shared on: ${format(new Date(shareDetails.updated_at), 'MMMM d, yyyy')}`, 20, 66);
  doc.text(`Total Snags: ${snags.length}`, 20, 72);
  
  // Add snag table
  const tableData = snags.map(snag => [
    snag.checklist_item?.friendly_text || 'Snag',
    snag.note || 'No notes',
    format(new Date(snag.created_at), 'MMM d, yyyy')
  ]);
  
  // Use autoTable plugin - using any to bypass TypeScript checking
  (doc as any).autoTable({
    startY: 80,
    head: [['Issue', 'Notes', 'Date Recorded']],
    body: tableData,
    theme: 'striped',
    headStyles: {
      fillColor: [133, 224, 163], // Primary green from design system
      textColor: [51, 51, 51]
    },
    styles: {
      fontSize: 9
    }
  });
  
  // Add footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(100, 100, 100);
    doc.text(
      'Generated by SnaggedIt Lite - www.snaggedit.com',
      105,
      doc.internal.pageSize.height - 10,
      { align: 'center' }
    );
    doc.text(
      `Page ${i} of ${pageCount}`,
      doc.internal.pageSize.width - 20,
      doc.internal.pageSize.height - 10
    );
  }
  
  return doc;
};

/**
 * Download the snag list as a PDF file
 * @param snags - Array of snag objects
 * @param shareDetails - Object containing details about the share
 */
export const downloadSnagListPDF = (snags: Snag[], shareDetails: ShareDetails): void => {
  try {
    const doc = generateSnagListPDF(snags, shareDetails);
    
    // Format the filename with the date
    const dateStr = format(new Date(), 'yyyy-MM-dd');
    const filename = `snag-list-${dateStr}.pdf`;
    
    // Save the PDF
    doc.save(filename);
  } catch (error) {
    console.error('Error generating PDF:', error);
    alert('There was a problem generating your PDF. Please try again later.');
  }
};
